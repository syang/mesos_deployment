---

#- name: run zookeeper server
#  docker: 
#    docker_api_version: "1.10"
#    name:  Zookeeper
#    image: "{{ ZOOKEEPER_DOCKER_IMAGE_REPO }}"
#    #expose: "{{ ZOOKEEPER_LINKED_PORTS }}"
#    state: running
#  sudo: yes

- name: test if there exists a running zookeeper
  shell: >
    if (docker ps -a | grep -q "Up .* {{ zookeeper_container_name }}" ); then
       echo 'running'
    elif (docker ps -a | grep -q "Exit .* {{ zookeeper_container_name }}" ); then
       echo 'exited'
    elif (docker ps -a | grep -q " {{ zookeeper_container_name }}" ); then
       echo "dead"
    else
       echo 'not running'
    fi
  register: whether_running


- name: clean zookeeper server if it ran before
  shell: docker rm "{{ zookeeper_container_name }}"
  when: whether_running.stdout == 'exited' or whether_running.stdout == 'dead'

- name: Overwrite myid file
  template: src=myid.j2 dest={{ zookeeper_myid_path_on_host }}

- name: Overwrite default config file
  template: src=zoo.cfg.j2 dest={{ zookeeper_cfg_path_on_host }}


- name: Copy Dockerfile to the host
  template: src=Dockerfile.j2 dest={{ dockerfile_on_host }}

#- debug: var=whether_running

- name: Build docker image
  shell: 
    docker build -t "{{ local_image_name }}" "{{ dockerfile_path_on_host }}"


- name: run zookeeper container
  shell: >
    docker run -d
    -p "{{ zookeeper_port1 }}:{{ zookeeper_port1 }}"
    -p "{{ zookeeper_port2 }}:{{ zookeeper_port2 }}"
    -p "{{ zookeeper_port3 }}:{{ zookeeper_port3 }}"
    --name "{{ zookeeper_container_name }}"
    "{{ local_image_name }}"
  when: whether_running.stdout != 'running'
